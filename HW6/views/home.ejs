<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Home</title>
  <link rel="stylesheet" href="/styles.css">
  <!-- Add React and Babel -->
  <script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
  <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
</head>
<body>
  <h1>Albums</h1>
  <div id="app" class="container"></div>

  <!-- Pass items data to the template as a JSON string -->
  <script type="text/babel">
    // Create variable with unescaped JS data from server
    const items = <%- items %>;

    // Functional component for the album list
    const AlbumList = ({ albums, onAlbumClick }) => {
      return (
        <ul>
          {Array.isArray(albums) && albums.length > 0 ? (
            albums.map(album => (
              <li key={album._id}>
                <a href="#" onClick={() => onAlbumClick(album)}>{album.title}</a>
              </li>
            ))
          ) : (
            <li>No albums found</li>
          )}
        </ul>
      );
    };

    // Functional component for the album details
    const Detail = ({ album, onClear }) => {
      const [currentAlbum, setCurrentAlbum] = React.useState(album);

      React.useEffect(() => {
        setCurrentAlbum(album);
      }, [album]);

      const handleChange = (event) => {
        const { name, value } = event.target;
        setCurrentAlbum(prevAlbum => ({
          ...prevAlbum,
          [name]: value
        }));
      };

      const clearForm = () => {
        setCurrentAlbum(null);
        onClear();
      };

      if (!currentAlbum) {
        return null;
      }

      return (
        <div>
          <h2>{currentAlbum.title}</h2>
          <form>
            <div>
              <label>Title:</label>
              <input type="text" name="title" value={currentAlbum.title} onChange={handleChange} />
            </div>
            <div>
              <label>Artist:</label>
              <input type="text" name="artist" value={currentAlbum.artist} onChange={handleChange} />
            </div>
            <div>
              <label>Year:</label>
              <input type="number" name="year" value={currentAlbum.year} onChange={handleChange} />
            </div>
            <div>
              <label>Genre:</label>
              <input type="text" name="genre" value={currentAlbum.genre} onChange={handleChange} />
            </div>
            <button type="button" onClick={clearForm}>Clear</button>
          </form>
        </div>
      );
    };

    // Functional component for the main application
    const App = () => {
      const [albums, setAlbums] = React.useState(items);
      const [selectedAlbum, setSelectedAlbum] = React.useState(null);

      const handleAlbumClick = (album) => {
        setSelectedAlbum(album);
      };

      const handleClear = () => {
        setSelectedAlbum(null);
      };

      return (
        <div>
          <AlbumList albums={albums} onAlbumClick={handleAlbumClick} />
          {selectedAlbum && (
            <Detail album={selectedAlbum} onClear={handleClear} />
          )}
        </div>
      );
    };

    // Render the App component
    ReactDOM.render(<App />, document.getElementById('app'));
  </script>
</body>
</html>
