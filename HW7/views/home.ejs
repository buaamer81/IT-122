<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Home</title>
  <link rel="stylesheet" href="/styles.css">
  <!-- Add React and Babel -->
  <script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
  <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
</head>
<body>
  <h1>Albums</h1>
  <div id="app" class="container"></div>

  <!-- Pass items data to the template as a JSON string -->
  <script type="text/babel">
    // Create variable with unescaped JS data from server
    const items = <%- items %>;

    // Functional component for the album list
    const AlbumList = ({ albums, onAlbumClick }) => {
      return (
        <ul>
          {Array.isArray(albums) && albums.length > 0 ? (
            albums.map(album => (
              <li key={album._id}>
                <a href="#" onClick={() => onAlbumClick(album)}>{album.title}</a>
              </li>
            ))
          ) : (
            <li>No albums found</li>
          )}
        </ul>
      );
    };

    // Functional component for the album details
    const Detail = ({ album, onClear, onSave, onDelete }) => {
      const [currentAlbum, setCurrentAlbum] = React.useState(album || {
        title: '',
        artist: '',
        year: '',
        genre: ''
      });

      React.useEffect(() => {
        setCurrentAlbum(album || {
          title: '',
          artist: '',
          year: '',
          genre: ''
        });
      }, [album]);

      const handleChange = (event) => {
        const { name, value } = event.target;
        setCurrentAlbum(prevAlbum => ({
          ...prevAlbum,
          [name]: value
        }));
      };

      const clearForm = () => {
        setCurrentAlbum({
          title: '',
          artist: '',
          year: '',
          genre: ''
        });
        onClear();
      };

      const saveAlbum = () => {
        onSave(currentAlbum);
      };

      const deleteAlbum = () => {
        if (currentAlbum && currentAlbum._id) {
          onDelete(currentAlbum._id);
        }
      };

      if (!currentAlbum) {
        return null;
      }

      return (
        <div>
          <h2>{currentAlbum._id ? currentAlbum.title : 'New Album'}</h2>
          <form>
            <div>
              <label>Title:</label>
              <input type="text" name="title" value={currentAlbum.title} onChange={handleChange} />
            </div>
            <div>
              <label>Artist:</label>
              <input type="text" name="artist" value={currentAlbum.artist} onChange={handleChange} />
            </div>
            <div>
              <label>Year:</label>
              <input type="number" name="year" value={currentAlbum.year} onChange={handleChange} />
            </div>
            <div>
              <label>Genre:</label>
              <input type="text" name="genre" value={currentAlbum.genre} onChange={handleChange} />
            </div>
            <button type="button" onClick={saveAlbum}>Save</button>
            {currentAlbum._id && <button type="button" onClick={deleteAlbum}>Delete</button>}
            <button type="button" onClick={clearForm}>Clear</button>
          </form>
        </div>
      );
    };

    // Functional component for the main application
    const App = () => {
      const [albums, setAlbums] = React.useState([]);
      const [selectedAlbum, setSelectedAlbum] = React.useState(null);

      // Fetch albums data after the component mounts
      React.useEffect(() => {
        fetch('/api/albums')
          .then(response => response.json())
          .then(data => setAlbums(data))
          .catch(error => console.error('Error fetching albums:', error));
      }, []);

      const handleAlbumClick = (album) => {
        setSelectedAlbum(album);
      };

      const handleClear = () => {
        setSelectedAlbum(null);
      };

      const handleSave = (album) => {
        const method = album._id ? 'PUT' : 'POST';
        fetch(`/api/albums${album._id ? `/${album._id}` : ''}`, {
          method: method,
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(album)
        })
        .then(response => response.json())
        .then(data => {
          if (!album._id) {
            setAlbums([...albums, data]); // Add new album
          } else {
            setAlbums(albums.map(a => (a._id === data._id ? data : a))); // Update album
          }
          setSelectedAlbum(data);
        })
        .catch(error => console.error('Error saving album:', error));
      };

      const handleDelete = (albumId) => {
        fetch(`/api/albums/${albumId}`, {
          method: 'DELETE'
        })
        .then(response => response.json())
        .then(() => {
          setAlbums(albums.filter(album => album._id !== albumId));
          setSelectedAlbum(null);
        })
        .catch(error => console.error('Error deleting album:', error));
      };

      return (
        <div>
          <AlbumList albums={albums} onAlbumClick={handleAlbumClick} />
          <Detail album={selectedAlbum} onClear={handleClear} onSave={handleSave} onDelete={handleDelete} />
        </div>
      );
    };

    // Render the App component
    ReactDOM.render(<App />, document.getElementById('app'));
  </script>
</body>
</html>
